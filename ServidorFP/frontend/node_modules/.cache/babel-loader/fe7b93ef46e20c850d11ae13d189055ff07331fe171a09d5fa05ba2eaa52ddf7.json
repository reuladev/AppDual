{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\ServidorFP\\\\frontend\\\\src\\\\components\\\\Preferences.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPreferenceComponent() {\n  _s();\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [preference, setPreference] = useState(\"\"); // Estado para el texto de la nueva nota\n  // Refresca los cambios de mi tabla preferencias\n  useEffect(() => {\n    GetAllPreferences(); // Llamada a la función GetAllPreferences\n  }, []);\n\n  // PETICION GET -- MOSTRAR PREFERENCIA\n  function GetAllPreferences() {\n    fetch('/getAllPreferences') // Hacer una solicitud HTTP GET a '/getAllPreferences'\n    .then(response => response.json()) // Convertir la respuesta a JSON\n    .then(data => {\n      console.log(\"Datos obtenidos:\", data); // Con esto verifico que el array Data recoge bien los datos de mi BBDD.\n      setData(data); // Establecer los datos obtenidos en el estado 'data'\n    }).catch(error => {\n      console.error(\"Error al obtener los datos:\", error); // Manejar cualquier error que ocurra durante la solicitud\n    });\n  }\n\n  // FUNCION SET PREFERENCIA\n  function HandlePreferenceChange(event) {\n    setPreference(event.target.value); // Establecer el nuevo valor del estado 'idioma'\n  }\n  // BUTTON INSERTAR NUEVA PREFERENCIA\n  function ButtonClickAdd() {\n    AddNewPreference(preference); // Llamar a la función AddNewIidom con el idioma.\n    GetAllPreferences(); // Actualizar la lista de idiomas después de agregar una nueva\n  }\n  // BUTTON BORRAR IDIOMA PREFERENCIA\n  function ButtonClickDelete() {\n    DeletePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // BUTTON NUEVA PREFERENCIA -- PETICION POST\n  // Nota: Aunque en preferencesServicel.js este en castellano, tu aqui ponlo todo en ingles\n  const AddNewPreference = async preference => {\n    const bodyParameters = {\n      'preference': preference\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/addPreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n  // BORRAR PREFERENCIA -- PETICION POST\n  const DeletePreference = async preference => {\n    const bodyParameters = {\n      'preference': preference\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/deletePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"preferences-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insert New Preference:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"preference-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"preference-input\",\n          children: \"Preference:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"preference-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickAdd,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Delete Preference:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"preference-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"preference-input\",\n          children: \"Preference:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"preference-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickDelete,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"preference-list\",\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: item.idpreferencia\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.preferencia\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPreferenceComponent, \"Qj8Z6UzSkNH55eIv50z/od+hYjQ=\");\n_c = AddPreferenceComponent;\nexport default AddPreferenceComponent;\nvar _c;\n$RefreshReg$(_c, \"AddPreferenceComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AddPreferenceComponent","_s","data","setData","preference","setPreference","GetAllPreferences","fetch","then","response","json","console","log","catch","error","HandlePreferenceChange","event","target","value","ButtonClickAdd","AddNewPreference","ButtonClickDelete","DeletePreference","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","idpreferencia","preferencia","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/ServidorFP/frontend/src/components/Preferences.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AddPreferenceComponent() {\r\n  // Definición de estados utilizando el hook useState\r\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\r\n  const [preference, setPreference] = useState(\"\"); // Estado para el texto de la nueva nota\r\n  // Refresca los cambios de mi tabla preferencias\r\n  useEffect(() => {\r\n    GetAllPreferences(); // Llamada a la función GetAllPreferences\r\n  }, []);\r\n\r\n  // PETICION GET -- MOSTRAR PREFERENCIA\r\n  function GetAllPreferences() {\r\n    fetch('/getAllPreferences') // Hacer una solicitud HTTP GET a '/getAllPreferences'\r\n      .then(response => response.json()) // Convertir la respuesta a JSON\r\n      .then(data => {\r\n        console.log(\"Datos obtenidos:\", data); // Con esto verifico que el array Data recoge bien los datos de mi BBDD.\r\n        setData(data); // Establecer los datos obtenidos en el estado 'data'\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al obtener los datos:\", error); // Manejar cualquier error que ocurra durante la solicitud\r\n      });\r\n  }\r\n\r\n  // FUNCION SET PREFERENCIA\r\n  function HandlePreferenceChange(event){\r\n    setPreference(event.target.value); // Establecer el nuevo valor del estado 'idioma'\r\n  }\r\n  // BUTTON INSERTAR NUEVA PREFERENCIA\r\n  function ButtonClickAdd(){\r\n    AddNewPreference(preference); // Llamar a la función AddNewIidom con el idioma.\r\n    GetAllPreferences(); // Actualizar la lista de idiomas después de agregar una nueva\r\n  }\r\n  // BUTTON BORRAR IDIOMA PREFERENCIA\r\n  function ButtonClickDelete(){\r\n    DeletePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\r\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\r\n  }\r\n\r\n  // BUTTON NUEVA PREFERENCIA -- PETICION POST\r\n  // Nota: Aunque en preferencesServicel.js este en castellano, tu aqui ponlo todo en ingles\r\n  const AddNewPreference = async (preference) => {\r\n    const bodyParameters = {\r\n      'preference': preference\r\n    }\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/addPreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n  // BORRAR PREFERENCIA -- PETICION POST\r\n  const DeletePreference = async (preference) => {\r\n    const bodyParameters = {\r\n      'preference': preference\r\n    }\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/deletePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n\r\n  // Renderizado del componente\r\n  return (\r\n    <div className=\"preferences-container\">\r\n      <h1>Insert New Preference:</h1>\r\n      <form className=\"preference-form\">\r\n          <div>\r\n              <label htmlFor=\"preference-input\">Preference:</label>\r\n              <input type=\"text\" value={preference} id=\"preference-input\" onChange={HandlePreferenceChange} />\r\n          </div>\r\n          <button type=\"button\" onClick={ButtonClickAdd}>Insert</button>\r\n      </form>\r\n      <h1>Delete Preference:</h1>\r\n      <form className=\"preference-form\">\r\n          <div>\r\n              <label htmlFor=\"preference-input\">Preference:</label>\r\n              <input type=\"text\" value={preference} id=\"preference-input\" onChange={HandlePreferenceChange} />\r\n          </div>\r\n          <button type=\"button\" onClick={ButtonClickDelete}>Delete</button>\r\n      </form>\r\n      <ul className=\"preference-list\">\r\n        {data.map(item => (\r\n          <li key={item.id}>\r\n            <h2>{item.idpreferencia}</h2>\r\n            <p>{item.preferencia}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPreferenceComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,sBAAsBA,CAAA,EAAG;EAAAC,EAAA;EAChC;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClD;EACAC,SAAS,CAAC,MAAM;IACdS,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASA,iBAAiBA,CAAA,EAAG;IAC3BC,KAAK,CAAC,oBAAoB,CAAC,CAAC;IAAA,CACzBC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CAClCF,IAAI,CAACN,IAAI,IAAI;MACZS,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEV,IAAI,CAAC,CAAC,CAAC;MACvCC,OAAO,CAACD,IAAI,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CACDW,KAAK,CAACC,KAAK,IAAI;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;;EAEA;EACA,SAASC,sBAAsBA,CAACC,KAAK,EAAC;IACpCX,aAAa,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EACrC;EACA;EACA,SAASC,cAAcA,CAAA,EAAE;IACvBC,gBAAgB,CAAChB,UAAU,CAAC,CAAC,CAAC;IAC9BE,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB;EACA;EACA,SAASe,iBAAiBA,CAAA,EAAE;IAC1BC,gBAAgB,CAAClB,UAAU,CAAC,CAAC,CAAC;IAC9BE,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB;;EAEA;EACA;EACA,MAAMc,gBAAgB,GAAG,MAAOhB,UAAU,IAAK;IAC7C,MAAMmB,cAAc,GAAG;MACrB,YAAY,EAAEnB;IAChB,CAAC;IACD,MAAMoB,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,cAAc;IACrC,CAAC;IAED,MAAMd,QAAQ,GAAG,MAAMF,KAAK,CAAC,iBAAiB,EAAEiB,OAAO,CAAC,CAAC,CAAC;IAC1D,MAAMM,YAAY,GAAG,MAAMrB,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5CC,OAAO,CAACC,GAAG,CAACgB,IAAI,CAACC,SAAS,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOA,YAAY,CAAC,CAAC;EACvB,CAAC;EACD;EACA,MAAMR,gBAAgB,GAAG,MAAOlB,UAAU,IAAK;IAC7C,MAAMmB,cAAc,GAAG;MACrB,YAAY,EAAEnB;IAChB,CAAC;IAED,MAAMoB,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,cAAc;IACrC,CAAC;IAED,MAAMd,QAAQ,GAAG,MAAMF,KAAK,CAAC,oBAAoB,EAAEiB,OAAO,CAAC,CAAC,CAAC;IAC7D,MAAMM,YAAY,GAAG,MAAMrB,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5CC,OAAO,CAACC,GAAG,CAACgB,IAAI,CAACC,SAAS,CAACC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOA,YAAY,CAAC,CAAC;EACvB,CAAC;;EAED;EACA,oBACE/B,OAAA;IAAKgC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCjC,OAAA;MAAAiC,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BrC,OAAA;MAAMgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC7BjC,OAAA;QAAAiC,QAAA,gBACIjC,OAAA;UAAOsC,OAAO,EAAC,kBAAkB;UAAAL,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrDrC,OAAA;UAAOuC,IAAI,EAAC,MAAM;UAACpB,KAAK,EAAEd,UAAW;UAACmC,EAAE,EAAC,kBAAkB;UAACC,QAAQ,EAAEzB;QAAuB;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/F,CAAC,eACNrC,OAAA;QAAQuC,IAAI,EAAC,QAAQ;QAACG,OAAO,EAAEtB,cAAe;QAAAa,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CAAC,eACPrC,OAAA;MAAAiC,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BrC,OAAA;MAAMgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC7BjC,OAAA;QAAAiC,QAAA,gBACIjC,OAAA;UAAOsC,OAAO,EAAC,kBAAkB;UAAAL,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrDrC,OAAA;UAAOuC,IAAI,EAAC,MAAM;UAACpB,KAAK,EAAEd,UAAW;UAACmC,EAAE,EAAC,kBAAkB;UAACC,QAAQ,EAAEzB;QAAuB;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/F,CAAC,eACNrC,OAAA;QAAQuC,IAAI,EAAC,QAAQ;QAACG,OAAO,EAAEpB,iBAAkB;QAAAW,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,eACPrC,OAAA;MAAIgC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC5B9B,IAAI,CAACwC,GAAG,CAACC,IAAI,iBACZ5C,OAAA;QAAAiC,QAAA,gBACEjC,OAAA;UAAAiC,QAAA,EAAKW,IAAI,CAACC;QAAa;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC7BrC,OAAA;UAAAiC,QAAA,EAAIW,IAAI,CAACE;QAAW;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFlBO,IAAI,CAACJ,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACnC,EAAA,CAzGQD,sBAAsB;AAAA8C,EAAA,GAAtB9C,sBAAsB;AA2G/B,eAAeA,sBAAsB;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}