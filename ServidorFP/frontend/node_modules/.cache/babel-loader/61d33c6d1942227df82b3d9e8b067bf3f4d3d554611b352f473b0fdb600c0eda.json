{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\MiPrimeraWebB\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExampleComponent() {\n  _s();\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [ididioma, setIdIdioma] = useState(\"\"); // Estado para el nombre de la nueva nota\n  const [idioma, setIdioma] = useState(\"\"); // Estado para el texto de la nueva nota\n\n  // Efecto que se ejecuta solo una vez al montar el componente\n  useEffect(() => {\n    ListIdioms(); // Llamada a la función GetAllNotes\n  }, []);\n\n  // Función para obtener todas las notas del servidor\n  function ListIdioms() {\n    fetch('/listIdioms') // Hacer una solicitud HTTP GET a '/getAllNotes'\n    .then(response => response.json()) // Convertir la respuesta a JSON\n    .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\n  }\n\n  // Función para manejar el cambio en el nombre de la nueva nota\n  function HandleIdIdiomaChange(event) {\n    setIdIdioma(event.target.value); // Establecer el nuevo valor del estado 'name'\n  }\n\n  // Función para manejar el cambio en el texto de la nueva nota\n  function HandleIdiomaChange(event) {\n    setIdioma(event.target.value); // Establecer el nuevo valor del estado 'text'\n  }\n\n  // Función para manejar el clic en el botón de inserción de nueva nota\n  function ButtonClick() {\n    AddNewRecord(idioma); // Llamar a la función AddNewRecord con el nombre y texto\n    ListIdioms(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // Función asincrónica para agregar un nuevo registro de nota\n  const AddNewRecord = async idioma => {\n    const bodyParameters = {\n      'idioma': idioma\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/insertIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Inserta nuevo idioma:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"IdIdioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ididioma,\n          id: \"title-input\",\n          onChange: HandleIdIdiomaChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"author-input\",\n          children: \"Idioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: idioma,\n          id: \"author-input\",\n          onChange: HandleIdiomaChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClick,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: item.idioma\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), \" \"]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(ExampleComponent, \"T9hWBbhT+gQQuj3P1bvnR91C0tM=\");\n_c = ExampleComponent;\nexport default ExampleComponent;\nvar _c;\n$RefreshReg$(_c, \"ExampleComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ExampleComponent","_s","data","setData","ididioma","setIdIdioma","idioma","setIdioma","ListIdioms","fetch","then","response","json","HandleIdIdiomaChange","event","target","value","HandleIdiomaChange","ButtonClick","AddNewRecord","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/MiPrimeraWebB/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ExampleComponent() {\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [ididioma, setIdIdioma] = useState(\"\"); // Estado para el nombre de la nueva nota\n  const [idioma, setIdioma] = useState(\"\"); // Estado para el texto de la nueva nota\n\n  // Efecto que se ejecuta solo una vez al montar el componente\n  useEffect(() => {\n    ListIdioms(); // Llamada a la función GetAllNotes\n  }, []);\n\n  // Función para obtener todas las notas del servidor\n  function ListIdioms() {\n    fetch('/listIdioms') // Hacer una solicitud HTTP GET a '/getAllNotes'\n      .then(response => response.json()) // Convertir la respuesta a JSON\n      .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\n  }\n\n  // Función para manejar el cambio en el nombre de la nueva nota\n  function HandleIdIdiomaChange(event){\n    setIdIdioma(event.target.value); // Establecer el nuevo valor del estado 'name'\n  }\n\n  // Función para manejar el cambio en el texto de la nueva nota\n  function HandleIdiomaChange(event){\n    setIdioma(event.target.value); // Establecer el nuevo valor del estado 'text'\n  }\n\n  // Función para manejar el clic en el botón de inserción de nueva nota\n  function ButtonClick(){\n    AddNewRecord(idioma); // Llamar a la función AddNewRecord con el nombre y texto\n    ListIdioms(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // Función asincrónica para agregar un nuevo registro de nota\n  const AddNewRecord = async (idioma) => {\n    const bodyParameters = {\n      'idioma': idioma\n    }\n  \n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    }\n  \n    const response = await fetch(\"/insertIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  }\n\n  // Renderizado del componente\n  return (\n    <div>\n      <h1>Inserta nuevo idioma:</h1>\n      <form>\n          <div>\n              <label htmlFor=\"title-input\">IdIdioma:</label>\n              <input type=\"text\" value={ididioma} id=\"title-input\" onChange={HandleIdIdiomaChange} /> {/* Entrada de texto para el nombre de la nueva nota */}\n          </div>\n          <div>\n              <label htmlFor=\"author-input\">Idioma:</label>\n              <input type=\"text\" value={idioma} id=\"author-input\" onChange={HandleIdiomaChange} /> {/* Entrada de texto para el contenido de la nueva nota */}\n          </div>\n          <button type=\"button\" onClick={ButtonClick}>Insert</button> {/* Botón para insertar la nueva nota */}\n      </form>\n      {/* Mapeo de los datos de las notas y su renderizado */}\n      {data.map(item => (\n        <div key={item.id}>\n          <h2>{item.idioma}</h2> {/* Renderizado del nombre de la nota */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ExampleComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}