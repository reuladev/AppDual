{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\ServidorFP\\\\frontend\\\\src\\\\components\\\\Preferences.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPreferenceComponent() {\n  _s();\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [preference, setPreference] = useState(\"\"); // Estado para el texto de la nueva nota\n  // Refresca los cambios de mi tabla preferencias\n  useEffect(() => {\n    GetAllPreferences(); // Llamada a la función GetAllPreferences\n  }, []);\n\n  // PETICION GET -- MOSTRAR PREFERENCIA\n  function GetAllPreferences() {\n    fetch('/getAllPreferences') // Hacer una solicitud HTTP GET a '/getAllPreferences'\n    .then(response => response.json()) // Convertir la respuesta a JSON\n    .then(data => {\n      console.log(\"Datos obtenidos:\", data); // Con esto verifico que el array Data recoge bien los datos de mi BBDD.\n      setData(data); // Establecer los datos obtenidos en el estado 'data'\n    }).catch(error => {\n      console.error(\"Error al obtener los datos:\", error); // Manejar cualquier error que ocurra durante la solicitud\n    });\n  }\n\n  // FUNCION SET PREFERENCIA\n  function HandlePreferenceChange(event) {\n    setPreference(event.target.value); // Establecer el nuevo valor del estado 'idioma'\n  }\n  // BUTTON INSERTAR NUEVA PREFERENCIA\n  function ButtonClickAdd() {\n    AddNewPreference(preference); // Llamar a la función AddNewIidom con el idioma.\n    GetAllPreferences(); // Actualizar la lista de idiomas después de agregar una nueva\n  }\n  // BUTTON BORRAR IDIOMA PREFERENCIA\n  function ButtonClickDelete() {\n    DeletePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\n  }\n  // BUTTON ACTUALIZAR PREFERENCIA\n  function ButtonClickUpdate() {\n    UpdatePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // BUTTON NUEVA PREFERENCIA -- PETICION POST\n  // Nota: Aunque en preferencesServicel.js este en castellano, tu aqui ponlo todo en ingles\n  const AddNewPreference = async preference => {\n    const bodyParameters = {\n      'preference': preference\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/addPreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n  // BORRAR PREFERENCIA -- PETICION POST\n  const DeletePreference = async preference => {\n    const bodyParameters = {\n      'preference': preference\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/deletePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n  // ACTUALIZAR PREFERENCIA -- PETICION POST\n  const UpdatePreference = async preference => {\n    const bodyParameters = {\n      'preference': preference\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/updatePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertar nueva preferencia:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"Preferencia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"title-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickAdd,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Borrar preferencia:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"Preferencia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"title-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickDelete,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Actualizar nueva preferencia:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"Preferencia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"title-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"author-input\",\n          children: \"Preferencia:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: preference,\n          id: \"author-input\",\n          onChange: HandlePreferenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickUpdate,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: item.idpreferencia\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.preferencia\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), \" \"]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(AddPreferenceComponent, \"Qj8Z6UzSkNH55eIv50z/od+hYjQ=\");\n_c = AddPreferenceComponent;\nexport default AddPreferenceComponent;\nvar _c;\n$RefreshReg$(_c, \"AddPreferenceComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AddPreferenceComponent","_s","data","setData","preference","setPreference","GetAllPreferences","fetch","then","response","json","console","log","catch","error","HandlePreferenceChange","event","target","value","ButtonClickAdd","AddNewPreference","ButtonClickDelete","DeletePreference","ButtonClickUpdate","UpdatePreference","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","idpreferencia","preferencia","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/ServidorFP/frontend/src/components/Preferences.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AddPreferenceComponent() {\r\n  // Definición de estados utilizando el hook useState\r\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\r\n  const [preference, setPreference] = useState(\"\"); // Estado para el texto de la nueva nota\r\n  // Refresca los cambios de mi tabla preferencias\r\n  useEffect(() => {\r\n    GetAllPreferences(); // Llamada a la función GetAllPreferences\r\n  }, []);\r\n\r\n  // PETICION GET -- MOSTRAR PREFERENCIA\r\n  function GetAllPreferences() {\r\n    fetch('/getAllPreferences') // Hacer una solicitud HTTP GET a '/getAllPreferences'\r\n      .then(response => response.json()) // Convertir la respuesta a JSON\r\n      .then(data => {\r\n        console.log(\"Datos obtenidos:\", data); // Con esto verifico que el array Data recoge bien los datos de mi BBDD.\r\n        setData(data); // Establecer los datos obtenidos en el estado 'data'\r\n      })\r\n      .catch(error => {\r\n        console.error(\"Error al obtener los datos:\", error); // Manejar cualquier error que ocurra durante la solicitud\r\n      });\r\n  }\r\n\r\n  // FUNCION SET PREFERENCIA\r\n  function HandlePreferenceChange(event){\r\n    setPreference(event.target.value); // Establecer el nuevo valor del estado 'idioma'\r\n  }\r\n  // BUTTON INSERTAR NUEVA PREFERENCIA\r\n  function ButtonClickAdd(){\r\n    AddNewPreference(preference); // Llamar a la función AddNewIidom con el idioma.\r\n    GetAllPreferences(); // Actualizar la lista de idiomas después de agregar una nueva\r\n  }\r\n  // BUTTON BORRAR IDIOMA PREFERENCIA\r\n  function ButtonClickDelete(){\r\n    DeletePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\r\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\r\n  }\r\n  // BUTTON ACTUALIZAR PREFERENCIA\r\n  function ButtonClickUpdate(){\r\n    UpdatePreference(preference); // Llamar a la función AddNewRecord con el nombre y texto\r\n    GetAllPreferences(); // Actualizar la lista de notas después de agregar una nueva\r\n  }\r\n\r\n  // BUTTON NUEVA PREFERENCIA -- PETICION POST\r\n  // Nota: Aunque en preferencesServicel.js este en castellano, tu aqui ponlo todo en ingles\r\n  const AddNewPreference = async (preference) => {\r\n    const bodyParameters = {\r\n      'preference': preference\r\n    }\r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/addPreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n  // BORRAR PREFERENCIA -- PETICION POST\r\n  const DeletePreference = async (preference) => {\r\n    const bodyParameters = {\r\n      'preference': preference\r\n    }\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/deletePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n  // ACTUALIZAR PREFERENCIA -- PETICION POST\r\n  const UpdatePreference = async (preference) => {\r\n    const bodyParameters = {\r\n      'preference': preference\r\n    }\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/updatePreferences\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n\r\n  // Renderizado del componente\r\n  return (\r\n    <div>\r\n      <h1>Insertar nueva preferencia:</h1>\r\n      <form>\r\n          <div>\r\n              <label htmlFor=\"title-input\">Preferencia:</label>\r\n              <input type=\"text\" value={preference} id=\"title-input\" onChange={HandlePreferenceChange} /> {/* Entrada de texto para el nombre de la nueva nota */}\r\n          </div>\r\n          <button type=\"button\" onClick={ButtonClickAdd}>Insert</button> {/* Botón para insertar la nueva nota */}\r\n      </form>\r\n      <h1>Borrar preferencia:</h1>\r\n      <form>\r\n          <div>\r\n              <label htmlFor=\"title-input\">Preferencia:</label>\r\n              <input type=\"text\" value={preference} id=\"title-input\" onChange={HandlePreferenceChange} /> {/* Entrada de texto para el nombre de la nueva nota */}\r\n          </div>\r\n          <button type=\"button\" onClick={ButtonClickDelete}>Insert</button> {/* Botón para insertar la nueva nota */}\r\n      </form>\r\n      <h1>Actualizar nueva preferencia:</h1>\r\n      <form>\r\n          <div>\r\n              <label htmlFor=\"title-input\">Preferencia:</label>\r\n              <input type=\"text\" value={preference} id=\"title-input\" onChange={HandlePreferenceChange} /> {/* Entrada de texto para el nombre de la nueva nota */}\r\n          </div>\r\n          <div>\r\n              <label htmlFor=\"author-input\">Preferencia:</label>\r\n              <input type=\"text\" value={preference} id=\"author-input\" onChange={HandlePreferenceChange} /> {/* Entrada de texto para el contenido de la nueva nota */}\r\n          </div>\r\n          <button type=\"button\" onClick={ButtonClickUpdate}>Insert</button> {/* Botón para insertar la nueva nota */}\r\n      </form>\r\n      {/* Bucle for, ten en cuenta que aqui tienes que poner los campos de la tabla, es decir, en castellano*/}\r\n      {data.map(item => (\r\n        <div key={item.id}>\r\n          <h2>{item.idpreferencia}</h2> {/* Renderizado del nombre de la nota */}\r\n          <p>{item.preferencia}</p> {/* Renderizado del contenido de la nota */}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddPreferenceComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}