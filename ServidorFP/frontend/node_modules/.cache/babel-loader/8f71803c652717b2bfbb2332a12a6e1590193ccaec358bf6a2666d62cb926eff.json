{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\ServidorFP\\\\frontend\\\\src\\\\components\\\\SearchStudent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchStudentComponent() {\n  _s();\n  const [name, setName] = useState(\"\"); // Va a contener el nombre que introduzca el usuario.\n  const [studentData, setStudentData] = useState([]); //Va a almacenar todos del estudiante\n  const [seeMore, setSeeMore] = useState(false); //Boolean que va a permitir mostrar o no el resto del codigo HTML cuand el usuario introduzca un nombre en el buscador.\n  const [studentId, setStudentId] = useState(\"\"); //Va a contener el idalumno que seleccione el usuario cuando pulse sobre el div que quiere y sera enviado al componente GetStudent.\n  const navigate = useNavigate(); //Va a contener la ruta del componente al que redirigiremos al usuario.\n\n  /*\r\n    Si nombre (que almacena lo que el usuario escriba) recibe contenido nuevo, es actualizado,\r\n    hace la peticion para obtener los datos de los alumnos a los que se asemeje lo introducido\r\n    por el usuario, sino, mantiene el array que almacena los datos vacio y pone en falso la \r\n    variable booleana seeMore para no mostrar nada.\r\n  */\n  useEffect(() => {\n    if (name) {\n      GetStudentDataByName(name);\n    } else {\n      setStudentData([]);\n      setSeeMore(false);\n    }\n  }, [name]);\n\n  /*\r\n    Si studentId recibe datos, es actualizado, navegamos hasta /getStudent\r\n  */\n  useEffect(() => {\n    console.log(\"Valor actualizado de StudentId en SearchStudent:\", studentId);\n    // Navegar solo si studentId ha sido actualizado\n    if (studentId) {\n      navigate(`/getStudent`, {\n        state: {\n          studentId2: studentId\n        }\n      });\n    }\n  }, [studentId]);\n\n  /*\r\n    Solicitamos la peticion para que nos devuela los datos del / los alumnos\r\n    que coincidan en su nombre con lo solicitado por el usuario.\r\n  */\n  const GetStudentDataByName = async name => {\n    try {\n      const bodyParameters = {\n        'nombre': name\n      };\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(bodyParameters)\n      };\n      const response = await fetch(\"/getStudentDataByName\", options);\n      if (!response.ok) {\n        throw new Error('Error en la solicitud');\n      }\n      const jsonResponse = await response.json();\n      setStudentData(jsonResponse);\n      setSeeMore(true);\n    } catch (error) {\n      console.error('Error:', error.message);\n    }\n  };\n\n  /*\r\n    Permite guardar el nombre que solicita el usuario en tiempo real.\r\n  */\n  const HandleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  /*\r\n    Recoge el idalumno del alumno que ha sido finalmente seleccionado por el usuario \r\n    y lo graba en studentId.\r\n  */\n  const handleStudentSelect = idalumno => {\n    console.log(\"Valor de idalumno en SearchStudent:\", idalumno);\n    setStudentId(idalumno);\n  };\n\n  /*\r\n    Muestra el codigo HTML, se compone de dos partes:\r\n      - Primero, muestra la barra del buscador, cuando el usuario escribe y name comienza a recibir contenido\r\n       se habilita la segunda parte.\r\n      - Segundo, muestra 4 atributos de todos los posibles alumnos que coincidan en su nombre con lo introduci-\r\n       do por el usuario en name, cuando el usuario pincha sobre el div del alumno que quiere, se activa la \r\n       funcion handleStudentSelect que graba el idalumno de ese alumno, lo envia al componente GetStudent y nos \r\n       redirige a el.\r\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"BUSCADOR DE ALUMNOS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      id: \"name-input\",\n      onChange: HandleNameChange,\n      placeholder: \"Ejemplo: Luc\\xEDa\",\n      className: \"search-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), seeMore && studentData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results-container\",\n      children: studentData.map((student, index) => /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#\",\n        className: \"student-link\",\n        onClick: () => handleStudentSelect(student.idalumno),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"student-card\",\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"student-info-list\",\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Nombre:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 23\n              }, this), \" \", student.nombre]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"DNI:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 23\n              }, this), \" \", student.dni]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Nacionalidad:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 23\n              }, this), \" \", student.nacionalidad]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Fecha de nacimiento:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 23\n              }, this), \" \", student.fechanacimiento]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchStudentComponent, \"cXVpyGx81x+LoqydExpgHJSG4KY=\", false, function () {\n  return [useNavigate];\n});\n_c = SearchStudentComponent;\nexport default SearchStudentComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchStudentComponent\");","map":{"version":3,"names":["React","useState","useEffect","Link","useNavigate","jsxDEV","_jsxDEV","SearchStudentComponent","_s","name","setName","studentData","setStudentData","seeMore","setSeeMore","studentId","setStudentId","navigate","GetStudentDataByName","console","log","state","studentId2","bodyParameters","options","method","headers","body","JSON","stringify","response","fetch","ok","Error","jsonResponse","json","error","message","HandleNameChange","event","target","value","handleStudentSelect","idalumno","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","length","map","student","index","to","onClick","nombre","dni","nacionalidad","fechanacimiento","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/ServidorFP/frontend/src/components/SearchStudent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport '../styles.css';\r\n\r\nfunction SearchStudentComponent() {\r\n  const [name, setName] = useState(\"\"); // Va a contener el nombre que introduzca el usuario.\r\n  const [studentData, setStudentData] = useState([]); //Va a almacenar todos del estudiante\r\n  const [seeMore, setSeeMore] = useState(false); //Boolean que va a permitir mostrar o no el resto del codigo HTML cuand el usuario introduzca un nombre en el buscador.\r\n  const [studentId, setStudentId] = useState(\"\"); //Va a contener el idalumno que seleccione el usuario cuando pulse sobre el div que quiere y sera enviado al componente GetStudent.\r\n  const navigate = useNavigate(); //Va a contener la ruta del componente al que redirigiremos al usuario.\r\n\r\n  /*\r\n    Si nombre (que almacena lo que el usuario escriba) recibe contenido nuevo, es actualizado,\r\n    hace la peticion para obtener los datos de los alumnos a los que se asemeje lo introducido\r\n    por el usuario, sino, mantiene el array que almacena los datos vacio y pone en falso la \r\n    variable booleana seeMore para no mostrar nada.\r\n  */\r\n  useEffect(() => {\r\n    if (name) {\r\n      GetStudentDataByName(name);\r\n    } else {\r\n      setStudentData([]);\r\n      setSeeMore(false);\r\n    }\r\n  }, [name]);\r\n\r\n  /*\r\n    Si studentId recibe datos, es actualizado, navegamos hasta /getStudent\r\n  */\r\n  useEffect(() => {\r\n    console.log(\"Valor actualizado de StudentId en SearchStudent:\", studentId);\r\n    // Navegar solo si studentId ha sido actualizado\r\n    if (studentId) {\r\n      navigate(`/getStudent`, { state: { studentId2: studentId } });\r\n    }\r\n  }, [studentId]);\r\n\r\n  /*\r\n    Solicitamos la peticion para que nos devuela los datos del / los alumnos\r\n    que coincidan en su nombre con lo solicitado por el usuario.\r\n  */\r\n  const GetStudentDataByName = async (name) => {\r\n    try {\r\n      const bodyParameters = {\r\n        'nombre': name\r\n      };\r\n      const options = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(bodyParameters)\r\n      };\r\n      const response = await fetch(\"/getStudentDataByName\", options);\r\n      if (!response.ok) {\r\n        throw new Error('Error en la solicitud');\r\n      }\r\n      const jsonResponse = await response.json();\r\n      setStudentData(jsonResponse);\r\n      setSeeMore(true);\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  /*\r\n    Permite guardar el nombre que solicita el usuario en tiempo real.\r\n  */\r\n  const HandleNameChange = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  /*\r\n    Recoge el idalumno del alumno que ha sido finalmente seleccionado por el usuario \r\n    y lo graba en studentId.\r\n  */\r\n  const handleStudentSelect = (idalumno) => {\r\n    console.log(\"Valor de idalumno en SearchStudent:\", idalumno);\r\n    setStudentId(idalumno);\r\n  };\r\n\r\n  /*\r\n    Muestra el codigo HTML, se compone de dos partes:\r\n      - Primero, muestra la barra del buscador, cuando el usuario escribe y name comienza a recibir contenido\r\n       se habilita la segunda parte.\r\n      - Segundo, muestra 4 atributos de todos los posibles alumnos que coincidan en su nombre con lo introduci-\r\n       do por el usuario en name, cuando el usuario pincha sobre el div del alumno que quiere, se activa la \r\n       funcion handleStudentSelect que graba el idalumno de ese alumno, lo envia al componente GetStudent y nos \r\n       redirige a el.\r\n  */\r\n  return (\r\n    <div className=\"search-container\">\r\n      <h4>BUSCADOR DE ALUMNOS</h4>\r\n      <input  type=\"text\" value={name} id=\"name-input\"  onChange={HandleNameChange}  placeholder=\"Ejemplo: Lucía\"  className=\"search-input\"/>\r\n      \r\n      {seeMore && studentData.length > 0 && (\r\n        <div className=\"results-container\">\r\n          {studentData.map((student, index) => (\r\n            <Link to=\"#\" className=\"student-link\" key={index} onClick={() => handleStudentSelect(student.idalumno)}>\r\n              <div className=\"student-card\">\r\n                <ul className=\"student-info-list\">\r\n                  <li><strong>Nombre:</strong> {student.nombre}</li>\r\n                  <li><strong>DNI:</strong> {student.dni}</li>\r\n                  <li><strong>Nacionalidad:</strong> {student.nacionalidad}</li>\r\n                  <li><strong>Fecha de nacimiento:</strong> {student.fechanacimiento}</li>\r\n                </ul>\r\n              </div>\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchStudentComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}