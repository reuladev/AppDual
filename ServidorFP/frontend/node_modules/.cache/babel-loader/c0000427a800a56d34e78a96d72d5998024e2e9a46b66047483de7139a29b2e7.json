{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\MiPrimeraWeb\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExampleComponent() {\n  _s();\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [name, setName] = useState(\"\"); // Estado para el nombre de la nueva nota\n  const [text, setText] = useState(\"\"); // Estado para el texto de la nueva nota\n\n  // Efecto que se ejecuta solo una vez al montar el componente\n  useEffect(() => {\n    GetAllNotes(); // Llamada a la función GetAllNotes\n  }, []);\n\n  // Función para obtener todas las notas del servidor\n  function GetAllNotes() {\n    fetch('/getAllNotes') // Hacer una solicitud HTTP GET a '/getAllNotes'\n    .then(response => response.json()) // Convertir la respuesta a JSON\n    .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\n  }\n\n  // Función para manejar el cambio en el nombre de la nueva nota\n  function HandleNameChange(event) {\n    setName(event.target.value); // Establecer el nuevo valor del estado 'name'\n  }\n\n  // Función para manejar el cambio en el texto de la nueva nota\n  function HandleTextChange(event) {\n    setText(event.target.value); // Establecer el nuevo valor del estado 'text'\n  }\n\n  // Función para manejar el clic en el botón de inserción de nueva nota\n  function ButtonClick() {\n    AddNewRecord(name, text); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllNotes(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // Función asincrónica para agregar un nuevo registro de nota\n  const AddNewRecord = async (name, text) => {\n    const bodyParameters = {\n      'nombre': name,\n      'texto': text\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/addNote\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Inserta nueva nota:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          id: \"title-input\",\n          onChange: HandleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"author-input\",\n          children: \"Text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: text,\n          id: \"author-input\",\n          onChange: HandleTextChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClick,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: item.nombre\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.texto\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), \" \"]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(ExampleComponent, \"hGYaioiquwpawoyRN64PXAiaz7c=\");\n_c = ExampleComponent;\nexport default ExampleComponent;\nvar _c;\n$RefreshReg$(_c, \"ExampleComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ExampleComponent","_s","data","setData","name","setName","text","setText","GetAllNotes","fetch","then","response","json","HandleNameChange","event","target","value","HandleTextChange","ButtonClick","AddNewRecord","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","nombre","texto","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/MiPrimeraWeb/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ExampleComponent() {\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [name, setName] = useState(\"\"); // Estado para el nombre de la nueva nota\n  const [text, setText] = useState(\"\"); // Estado para el texto de la nueva nota\n\n  // Efecto que se ejecuta solo una vez al montar el componente\n  useEffect(() => {\n    GetAllNotes(); // Llamada a la función GetAllNotes\n  }, []);\n\n  // Función para obtener todas las notas del servidor\n  function GetAllNotes() {\n    fetch('/getAllNotes') // Hacer una solicitud HTTP GET a '/getAllNotes'\n      .then(response => response.json()) // Convertir la respuesta a JSON\n      .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\n  }\n\n  // Función para manejar el cambio en el nombre de la nueva nota\n  function HandleNameChange(event){\n    setName(event.target.value); // Establecer el nuevo valor del estado 'name'\n  }\n\n  // Función para manejar el cambio en el texto de la nueva nota\n  function HandleTextChange(event){\n    setText(event.target.value); // Establecer el nuevo valor del estado 'text'\n  }\n\n  // Función para manejar el clic en el botón de inserción de nueva nota\n  function ButtonClick(){\n    AddNewRecord(name, text); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllNotes(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // Función asincrónica para agregar un nuevo registro de nota\n  const AddNewRecord = async (name, text) => {\n    const bodyParameters = {\n      'nombre': name,\n      'texto': text\n    }\n  \n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    }\n  \n    const response = await fetch(\"/addNote\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  }\n\n  // Renderizado del componente\n  return (\n    <div>\n      <h1>Inserta nueva nota:</h1>\n      <form>\n          <div>\n              <label htmlFor=\"title-input\">Name:</label>\n              <input type=\"text\" value={name} id=\"title-input\" onChange={HandleNameChange} /> {/* Entrada de texto para el nombre de la nueva nota */}\n          </div>\n          <div>\n              <label htmlFor=\"author-input\">Text:</label>\n              <input type=\"text\" value={text} id=\"author-input\" onChange={HandleTextChange} /> {/* Entrada de texto para el contenido de la nueva nota */}\n          </div>\n          <button type=\"button\" onClick={ButtonClick}>Insert</button> {/* Botón para insertar la nueva nota */}\n      </form>\n      {/* Mapeo de los datos de las notas y su renderizado */}\n      {data.map(item => (\n        <div key={item.id}>\n          <h2>{item.nombre}</h2> {/* Renderizado del nombre de la nota */}\n          <p>{item.texto}</p> {/* Renderizado del contenido de la nota */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ExampleComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}