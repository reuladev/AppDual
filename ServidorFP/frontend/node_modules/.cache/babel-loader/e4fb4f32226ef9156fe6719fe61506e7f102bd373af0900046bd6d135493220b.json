{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\MiPrimeraWebB\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction IdiomsComponent() {\n  _s();\n  const [data, setData] = useState([]);\n  const [ididiom, setIdIdiom] = useState(\"\");\n  const [idiom, setIdiom] = useState(\"\");\n  useEffect(() => {\n    ListIdioms();\n  }, []);\n  const ListIdioms = () => {\n    fetch('/listIdioms').then(response => response.json()).then(data => setData(data));\n  };\n  const handleIdIdiomChange = event => {\n    setIdIdiom(event.target.value);\n  };\n  const handleIdiomChange = event => {\n    setIdiom(event.target.value);\n  };\n  const ButtonClick = () => {\n    AddNewRecord(ididiom, idiom);\n    ListIdioms();\n  };\n  const AddNewRecord = async (ididiom, idiom) => {\n    const bodyParameters = {\n      'ididiom': ididiom,\n      'idiom': idiom\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/insertIdioms\", options);\n    const jsonResponse = await response.json();\n    console.log(JSON.stringify(jsonResponse));\n    return jsonResponse;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertar nuevo idioma\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"IdIdioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ididiom,\n          id: \"title-input\",\n          onChange: handleIdIdiomChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"author-input\",\n          children: \"Idioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: idiom,\n          id: \"author-input\",\n          onChange: handleIdiomChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClick,\n        children: \"Insert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: item.ididiom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: item.idiom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(IdiomsComponent, \"gDFxF7QcLa9CA2QwwXXummC9mC8=\");\n_c = IdiomsComponent;\nexport default IdiomsComponent;\nvar _c;\n$RefreshReg$(_c, \"IdiomsComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","IdiomsComponent","_s","data","setData","ididiom","setIdIdiom","idiom","setIdiom","ListIdioms","fetch","then","response","json","handleIdIdiomChange","event","target","value","handleIdiomChange","ButtonClick","AddNewRecord","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/MiPrimeraWebB/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction IdiomsComponent() {\n    const [data, setData] = useState([]);\n    const [ididiom, setIdIdiom] = useState(\"\");\n    const [idiom, setIdiom] = useState(\"\");\n\n    useEffect(() => {\n        ListIdioms();\n    }, []);\n    \n    const ListIdioms = () => {\n        fetch('/listIdioms')\n            .then(response => response.json())\n            .then(data => setData(data));\n    }\n\n    const handleIdIdiomChange = (event) => {\n        setIdIdiom(event.target.value);\n    }\n\n    const handleIdiomChange = (event) => {\n        setIdiom(event.target.value);\n    }\n\n    const ButtonClick = () => {\n        AddNewRecord(ididiom, idiom);\n        ListIdioms();\n    }\n\n    const AddNewRecord = async (ididiom,idiom) => {\n        const bodyParameters = {\n            'ididiom': ididiom,\n            'idiom': idiom\n        }\n\n        const options = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(bodyParameters)\n        }\n\n        const response = await fetch(\"/insertIdioms\", options);\n        const jsonResponse = await response.json();\n        console.log(JSON.stringify(jsonResponse));\n        return jsonResponse;\n    }\n\n    return (\n        <div>\n            <h1>Insertar nuevo idioma</h1>\n            <form>\n                <div>\n                    <label htmlFor=\"title-input\">IdIdioma:</label>\n                    <input type=\"text\" value={ididiom} id=\"title-input\" onChange={handleIdIdiomChange} />\n                </div>\n                <div>\n                    <label htmlFor=\"author-input\">Idioma:</label>\n                    <input type=\"text\" value={idiom} id=\"author-input\" onChange={handleIdiomChange} />\n                </div>\n                <button type=\"button\" onClick={ButtonClick}>Insert</button>\n            </form>\n            {data.map(item => (\n                <div key={item.id}>\n                    <h2>{item.ididiom}</h2>\n                    <p>{item.idiom}</p>\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default IdiomsComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}