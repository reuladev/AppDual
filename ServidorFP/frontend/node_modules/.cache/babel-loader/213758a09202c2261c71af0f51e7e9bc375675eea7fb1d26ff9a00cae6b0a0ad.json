{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reulo\\\\OneDrive\\\\Escritorio\\\\ServidorFP\\\\frontend\\\\src\\\\components\\\\Idioms.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddIdiomComponent() {\n  _s();\n  // Definición de estados utilizando el hook useState\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\n  const [ididioma, setIdIdioma] = useState(\"\"); // Estado para el nombre de la nueva nota\n  const [idioma, setIdioma] = useState(\"\"); // Estado para el texto de la nueva nota\n  // Efecto que se ejecuta solo una vez al montar el componente\n  useEffect(() => {\n    GetAllIdioms(); // Llamada a la función GetAllNotes\n  }, []);\n\n  // PETICION GET -- MOSTRAR IDIOMAS\n  function GetAllIdioms() {\n    fetch('/getAllIdioms') // Hacer una solicitud HTTP GET a '/getAllNotes'\n    .then(response => response.json()) // Convertir la respuesta a JSON\n    .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\n  }\n\n  // FUNCION SET ID IDIOMA\n  function HandleIdIdiomsChange(event) {\n    setIdIdioma(event.target.value); // Establecer el nuevo valor del estado 'ididioma'\n  }\n\n  // FUNCION SET IDIOMA\n  function HandleIdiomChange(event) {\n    setIdioma(event.target.value); // Establecer el nuevo valor del estado 'idioma'\n  }\n  // BUTTON INSERTAR NUEVO IDIOMA \n  function ButtonClickAdd() {\n    AddNewIdiom(idioma); // Llamar a la función AddNewIidom con el idioma.\n    GetAllIdioms(); // Actualizar la lista de idiomas después de agregar una nueva\n  }\n  // BUTTON BORRAR IDIOMA \n  function ButtonClickDelete() {\n    DeleteIdiom(ididioma); // Llamar a la función AddNewRecord con el nombre y texto\n    GetAllIdioms(); // Actualizar la lista de notas después de agregar una nueva\n  }\n\n  // BUTTON NUEVO IDIOMA -- PETICION POST\n  const AddNewIdiom = async idioma => {\n    const bodyParameters = {\n      'idioma': idioma\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/addIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n  // BORRAR IDIOMA -- PETICION POST\n  const DeleteIdiom = async idioma => {\n    const bodyParameters = {\n      'idioma': idioma\n    };\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(bodyParameters)\n    };\n    const response = await fetch(\"/deleteIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\n    return jsonResponse; // Devolver la respuesta JSON\n  };\n\n  // Renderizado del componente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"idioms-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Insertar nuevo idioma:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"idiom-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title-input\",\n          children: \"Idioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: idioma,\n          id: \"title-input\",\n          onChange: HandleIdiomChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickAdd,\n        children: \"Insertar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Borrar nuevo idioma:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"idiom-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"id-input\",\n          children: \"ID Idioma:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ididioma,\n          id: \"id-input\",\n          onChange: HandleIdIdiomsChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: ButtonClickDelete,\n        children: \"Borrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"idiom-list\",\n      children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: item.ididioma\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: item.idioma\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(AddIdiomComponent, \"T9hWBbhT+gQQuj3P1bvnR91C0tM=\");\n_c = AddIdiomComponent;\nexport default AddIdiomComponent;\nvar _c;\n$RefreshReg$(_c, \"AddIdiomComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AddIdiomComponent","_s","data","setData","ididioma","setIdIdioma","idioma","setIdioma","GetAllIdioms","fetch","then","response","json","HandleIdIdiomsChange","event","target","value","HandleIdiomChange","ButtonClickAdd","AddNewIdiom","ButtonClickDelete","DeleteIdiom","bodyParameters","options","method","headers","body","JSON","stringify","jsonResponse","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","onClick","map","item","_c","$RefreshReg$"],"sources":["C:/Users/reulo/OneDrive/Escritorio/ServidorFP/frontend/src/components/Idioms.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AddIdiomComponent() {\r\n  // Definición de estados utilizando el hook useState\r\n  const [data, setData] = useState([]); // Estado para almacenar datos obtenidos del servidor\r\n  const [ididioma, setIdIdioma] = useState(\"\"); // Estado para el nombre de la nueva nota\r\n  const [idioma, setIdioma] = useState(\"\"); // Estado para el texto de la nueva nota\r\n  // Efecto que se ejecuta solo una vez al montar el componente\r\n  useEffect(() => {\r\n    GetAllIdioms(); // Llamada a la función GetAllNotes\r\n  }, []);\r\n\r\n  // PETICION GET -- MOSTRAR IDIOMAS\r\n  function GetAllIdioms() {\r\n    fetch('/getAllIdioms') // Hacer una solicitud HTTP GET a '/getAllNotes'\r\n      .then(response => response.json()) // Convertir la respuesta a JSON\r\n      .then(data => setData(data)); // Establecer los datos obtenidos en el estado 'data'\r\n  }\r\n\r\n\r\n  // FUNCION SET ID IDIOMA\r\n  function HandleIdIdiomsChange(event){\r\n    setIdIdioma(event.target.value); // Establecer el nuevo valor del estado 'ididioma'\r\n  }\r\n\r\n  // FUNCION SET IDIOMA\r\n  function HandleIdiomChange(event){\r\n    setIdioma(event.target.value); // Establecer el nuevo valor del estado 'idioma'\r\n  }\r\n  // BUTTON INSERTAR NUEVO IDIOMA \r\n  function ButtonClickAdd(){\r\n    AddNewIdiom(idioma); // Llamar a la función AddNewIidom con el idioma.\r\n    GetAllIdioms(); // Actualizar la lista de idiomas después de agregar una nueva\r\n  }\r\n  // BUTTON BORRAR IDIOMA \r\n  function ButtonClickDelete(){\r\n    DeleteIdiom(ididioma); // Llamar a la función AddNewRecord con el nombre y texto\r\n    GetAllIdioms(); // Actualizar la lista de notas después de agregar una nueva\r\n  }\r\n\r\n  // BUTTON NUEVO IDIOMA -- PETICION POST\r\n  const AddNewIdiom = async (idioma) => {\r\n    const bodyParameters = {\r\n      'idioma': idioma\r\n    }\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/addIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n  // BORRAR IDIOMA -- PETICION POST\r\n  const DeleteIdiom = async (idioma) => {\r\n    const bodyParameters = {\r\n      'idioma': idioma\r\n    }\r\n  \r\n    const options = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(bodyParameters)\r\n    }\r\n  \r\n    const response = await fetch(\"/deleteIdioms\", options); // Hacer una solicitud HTTP POST a '/addNote' con los datos de la nueva nota\r\n    const jsonResponse = await response.json(); // Convertir la respuesta a JSON\r\n    console.log(JSON.stringify(jsonResponse)); // Imprimir la respuesta JSON en la consola\r\n    return jsonResponse; // Devolver la respuesta JSON\r\n  }\r\n\r\n  // Renderizado del componente\r\n  return (\r\n    <div className=\"idioms-container\">\r\n      <h1>Insertar nuevo idioma:</h1>\r\n      <form className=\"idiom-form\">\r\n        <div>\r\n          <label htmlFor=\"title-input\">Idioma:</label>\r\n          <input type=\"text\" value={idioma} id=\"title-input\" onChange={HandleIdiomChange} />\r\n        </div>\r\n        <button type=\"button\" onClick={ButtonClickAdd}>Insertar</button>\r\n      </form>\r\n\r\n      <h1>Borrar nuevo idioma:</h1>\r\n      <form className=\"idiom-form\">\r\n        <div>\r\n          <label htmlFor=\"id-input\">ID Idioma:</label>\r\n          <input type=\"text\" value={ididioma} id=\"id-input\" onChange={HandleIdIdiomsChange} />\r\n        </div>\r\n        <button type=\"button\" onClick={ButtonClickDelete}>Borrar</button>\r\n      </form>\r\n\r\n      <ul className=\"idiom-list\">\r\n        {data.map(item => (\r\n          <li key={item.id}>\r\n            <h2>{item.ididioma}</h2>\r\n            <p>{item.idioma}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddIdiomComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}